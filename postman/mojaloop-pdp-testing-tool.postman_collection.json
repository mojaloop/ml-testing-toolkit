{
	"info": {
		"_postman_id": "cd9051cc-b777-4a92-9748-3b4374857512",
		"name": "PDP Testing Tool",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Quote Requests",
			"item": [
				{
					"name": "Send Quote happy path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote wrong value pattern",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote missing body param",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('quoteId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote missing header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('fspiop-source');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with wrong body param type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('type');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody.quoteId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": 123,\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote happy path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "71ba6b27-7b12-4248-b38d-ced6eea02ba1",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('quoteId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0199f4a-5101-41ae-936a-95876d73d460",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd53c7ee-b55d-4d1a-a178-3c09e68e8901",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2b5e1bd-f23e-4874-98a7-fc62bcd9d331",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Transfer Requests",
			"item": [
				{
					"name": "Send Transfer Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "900142b0-e4d7-43a4-a751-38202b600661",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer Happy Path Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd26c8bc-80fc-4fd4-94f0-8aeebca99504",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "acf606f3-df75-4428-80ff-28b3aeec4aba",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer with Wrong transferId pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "900142b0-e4d7-43a4-a751-38202b600661",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}134\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer missing body param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "900142b0-e4d7-43a4-a751-38202b600661",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('transferId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer missing header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "900142b0-e4d7-43a4-a751-38202b600661",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('date');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer with wrong body param type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "900142b0-e4d7-43a4-a751-38202b600661",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('type');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody.transferId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": 123,\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transfer Happy Path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fed25f87-0c3b-4df6-a13b-2a69b3025fa5",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transferId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b362e5fd-6781-43c6-a57f-984eeb09e73d",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/transfers/{{transferId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"transfers",
								"{{transferId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd53c7ee-b55d-4d1a-a178-3c09e68e8901",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2b5e1bd-f23e-4874-98a7-fc62bcd9d331",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Account Lookup Requests",
			"item": [
				{
					"name": "Get Party Receiver Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "decab794-66d7-4b03-b6da-4191441206a8",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Participant missing body param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40abf007-d0df-4181-87c9-5c77d441645d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('fspId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver missing headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "decab794-66d7-4b03-b6da-4191441206a8",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('date');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Participants By Type and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95582be5-a2c2-4a86-bafb-c612234e5bdf",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Participants By Type, SubId and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ccc420-2849-44cd-80a5-2fe59b6dbeaa",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participant By Type, SubId and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c561f2f4-fff0-47f8-b43e-778b9a5e64ee",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fspId\": \"fsp1\",\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/shoecompany/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"shoecompany",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participant By Type and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08622785-32d6-48c7-9723-8bd7927fb4e3",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fspId\": \"fsp1\",\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver by SubId Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f30ae19-aa12-45f4-99f7-b74a5726efd0",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05c8c884-77c0-4857-a8d5-0e2b3a8a9abb",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28e389c2-6f44-45c9-8f64-f7a8e99661c5",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b3e4faa7-f837-4e8e-975e-a9c7f7749407",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('requestId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestId\": \"{{requestId}}\",\r\n  \"partyList\": [\r\n    {\r\n      \"partyIdType\": \"MSISDN\",\r\n      \"partyIdentifier\": \"string\",\r\n      \"partySubIdOrType\": \"string\",\r\n      \"fspId\": \"string\"\r\n    }\r\n  ],\r\n  \"currency\": \"AED\"\r\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Accept Header Validation",
			"item": [
				{
					"name": "Send Quote with invalid accept header 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with invalid accept header 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+test"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with invalid accept header 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "test/vnd.interoperability.quotes+json;"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with a valid accept header 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with a valid accept header 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Version Negotiation",
			"item": [
				{
					"name": "Send Quote with version 1.0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.0\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 1.1 with note body param",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.1\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 1.1 without note body param",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.1\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.1\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 5.0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal(\"3001\");",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=5.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlements",
			"item": [
				{
					"name": "Get Existing Open Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"State should be OPEN\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].state).to.eql('OPEN');",
									"    pm.environment.set(\"openWindowID\", jsonData[0].id);",
									"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows"
							],
							"query": [
								{
									"key": "state",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Existing Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New window State should be OPEN\", function () {",
									"    console.log(pm.response.json());",
									"    pm.expect(pm.response.json().state).to.eql('OPEN');",
									"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
									"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
									"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
									"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/123",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Settlement for Closed Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"settlementId\", pm.response.json().id);",
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
									"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
									"});",
									"",
									"pm.test(\"Number of associated windows should be 1\", function () {",
									"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
									"});",
									"",
									"",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        console.log(jsonData.participants[j].accounts[k].id)",
									"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
									"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
									"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
									"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
									"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
									"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
									"        }",
									"        ",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": 123\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prepare Settlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        console.log(jsonData.participants[j].accounts[k].id)",
									"        const participantPutRequest = {",
									"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
									"          method: 'PUT',",
									"          header: {",
									"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"              \"Content-Type\": \"application/json\"",
									"          },",
									"          body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                  \"participants\": [",
									"                    {",
									"                      \"id\": jsonData.participants[j].id,",
									"                      \"accounts\": [",
									"                        {",
									"                          \"id\": jsonData.participants[j].accounts[k].id,",
									"                          \"reason\": \"Transfers recorded for payer\",",
									"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  ]",
									"                }",
									"            )",
									"          }",
									"        };",
									"        pm.sendRequest(participantPutRequest, function (err, response) {",
									"            console.log(response.json());",
									"        });",
									"        ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements",
								"{{settlementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check state for participants after prepare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
									"});",
									"",
									"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
									"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
									"});",
									"",
									"",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
									"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
									"        });",
									"    }",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements",
								"{{settlementId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "94ff1dbd-3835-4374-bbae-50892134e33a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b7675d4f-8b64-4a44-a60a-6f690740d75d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Callback Assertions",
			"item": [
				{
					"name": "Get Party Receiver Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "decab794-66d7-4b03-b6da-4191441206a8",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"",
									"",
									"    pm.sendRequest(\"http://localhost:5050/longpolling/callbacks/parties/MSISDN/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              pm.test(\"Got resonse1\"+response.text(), function () {",
									"                pm.expect(\"1\").equal(\"1\");",
									"            });",
									"          } else {",
									"                console.log(response)",
									"          }",
									"    });",
									"   ",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver error callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "decab794-66d7-4b03-b6da-4191441206a8",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"",
									"",
									"    pm.sendRequest(\"http://localhost:5050/longpolling/callbacks/parties/MSISDN/1234567890\", function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              pm.test(\"Got resonse1\"+response.text(), function () {",
									"                pm.expect(\"1\").equal(\"1\");",
									"            });",
									"          } else {",
									"                console.log(response)",
									"          }",
									"    });",
									"   ",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{payerfsp}}"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/1234567890",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"1234567890"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "335c2302-1ec9-41ff-8484-8d66bafdfb93",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eae69591-9946-4f24-a59f-ec1c030a5dee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authorization Requests",
			"item": [
				{
					"name": "request the Payer to enter the applicable credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f4897da-18cb-4195-95b1-582b13ba0677",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transactionRequestsId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15dc16b3-7238-4a57-8f3d-a84d3a831334",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/authorizations/{{transactionRequestsId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"authorizations",
								"{{transactionRequestsId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "BulkQuote Requests",
			"item": [
				{
					"name": "request the creation of a bulk quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36893df3-4cd3-424c-9f6c-f1e42a5bd989",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());",
									"pm.environment.set('transactionId', uuid.v4());",
									"pm.environment.set('quoteId', uuid.v4());",
									"pm.environment.set('originalTransactionId', uuid.v4());",
									"pm.environment.set('expiration', new Date().toISOString());",
									"pm.environment.set('merchantClassificationCode', _.random(0, 9999));",
									"pm.environment.set('balanceOfPayments', _.random(100, 999));",
									"pm.environment.set('latitude', _.random(-90,90))",
									"pm.environment.set('longitude', _.random(-180, 90))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65433afb-5284-451d-a038-df0de5808b00",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bulkQuoteId\": \"{{bulkQuoteId}}\",\r\n  \"payer\": {\r\n    \"partyIdInfo\": {\r\n      \"partyIdType\": \"MSISDN\",\r\n      \"partyIdentifier\": \"string\",\r\n      \"partySubIdOrType\": \"string\",\r\n      \"fspId\": \"string\"\r\n    },\r\n    \"merchantClassificationCode\": \"{{merchantClassificationCode}}\",\r\n    \"name\": \"string\",\r\n    \"personalInfo\": {\r\n      \"complexName\": {\r\n        \"firstName\": \"string\",\r\n        \"middleName\": \"string\",\r\n        \"lastName\": \"string\"\r\n      },\r\n      \"dateOfBirth\": \"1999-01-01\"\r\n    }\r\n  },\r\n  \"geoCode\": {\r\n    \"latitude\": \"{{latitude}}\",\r\n    \"longitude\": \"{{longitude}}\"\r\n  },\r\n  \"expiration\": \"{{expiration}}\",\r\n  \"individualQuotes\": [\r\n    {\r\n      \"quoteId\": \"{{quoteId}}\",\r\n      \"transactionId\": \"{{transactionId}}\",\r\n      \"payee\": {\r\n        \"partyIdInfo\": {\r\n          \"partyIdType\": \"MSISDN\",\r\n          \"partyIdentifier\": \"string\",\r\n          \"partySubIdOrType\": \"string\",\r\n          \"fspId\": \"string\"\r\n        },\r\n        \"merchantClassificationCode\": \"{{merchantClassificationCode}}\",\r\n        \"name\": \"string\",\r\n        \"personalInfo\": {\r\n          \"complexName\": {\r\n            \"firstName\": \"string\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"string\"\r\n          },\r\n          \"dateOfBirth\": \"1999-01-01\"\r\n        }\r\n      },\r\n      \"amountType\": \"SEND\",\r\n      \"amount\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"fees\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"transactionType\": {\r\n        \"scenario\": \"DEPOSIT\",\r\n        \"subScenario\": \"A_Z\",\r\n        \"initiator\": \"PAYER\",\r\n        \"initiatorType\": \"CONSUMER\",\r\n        \"refundInfo\": {\r\n          \"originalTransactionId\": \"{{originalTransactionId}}\",\r\n          \"refundReason\": \"string\"\r\n        },\r\n        \"balanceOfPayments\": \"{{balanceOfPayments}}\"\r\n      },\r\n      \"note\": \"string\",\r\n      \"extensionList\": {\r\n        \"extension\": [\r\n          {\r\n            \"key\": \"string\",\r\n            \"value\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"extensionList\": {\r\n    \"extension\": [\r\n      {\r\n        \"key\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkQuotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkQuotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get information regarding an earlier created or requested bulk quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a05323c-3fae-4fb6-9647-5ea0fc6fce7a",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97cf7435-419a-4883-a929-3b2172999a72",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkQuotes/{{bulkQuoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkQuotes",
								"{{bulkQuoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "BulkTransfer Requests",
			"item": [
				{
					"name": "request the creation of a bulk transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "842f7fa6-aa4c-448f-aca1-fd581ec6a359",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());",
									"pm.environment.set('bulkTransferId', uuid.v4());",
									"pm.environment.set('expiration', new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cdb2065c-6b79-40cd-b431-93a5b6a92150",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bulkTransferId\": \"{{bulkTransferId}}\",\r\n  \"bulkQuoteId\": \"{{bulkQuoteId}}\",\r\n  \"payerFsp\": \"string\",\r\n  \"payeeFsp\": \"string\",\r\n  \"individualTransfers\": [\r\n    {\r\n      \"transferId\": \"{{transferId}}\",\r\n      \"transferAmount\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"ilpPacket\": \"string\",\r\n      \"condition\": \"condition1_condition2_condition3_condition4\",\r\n      \"extensionList\": {\r\n        \"extension\": [\r\n          {\r\n            \"key\": \"string\",\r\n            \"value\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"expiration\": \"{{expiration}}\",\r\n  \"extensionList\": {\r\n    \"extension\": [\r\n      {\r\n        \"key\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkTransfers",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkTransfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "get information regarding an earlier created or requested bulk transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5fbb3cb0-68d3-4ae7-b695-7dfe4ab14431",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkTransferId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47049fc6-a814-47d5-973f-047939828b22",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkTransfers/{{bulkTransferId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkTransfers",
								"{{bulkTransferId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Transaction Requests",
			"item": [
				{
					"name": "get transaction information regarding a financial transaction created earlier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d5c06dc-21d9-4fcc-bef0-1264adeccc43",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('ID', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51097182-567d-4d80-b6e5-f86c457d671c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/transactions/{{ID}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"transactions",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "72ad19de-ef86-48af-a9b8-7c6ff590070b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "197a51e9-4540-4926-9c8f-0bd1a14f4920",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}