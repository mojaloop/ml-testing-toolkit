{
	"info": {
		"_postman_id": "5d8ab1c2-811d-4d1c-b5c0-8a0113234a19",
		"name": "PDP Testing Tool",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Quote Requests",
			"item": [
				{
					"name": "Send Quote happy path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f24d268-e1a3-49e9-9839-e79f9a59c63e",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f4f3186-9ca1-4152-afb7-b28ec80aba0d",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote wrong value pattern",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c0571c6-55d3-45c2-bef0-4129f9143308",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd733925-7d94-4bd7-9944-c9c884c3d538",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote missing body param",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9dc5e3c1-ef38-4132-bf51-baa3ba7221ce",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f2def8ce-806c-4179-95f8-84c3088791d4",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('quoteId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote missing header",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eae9938c-c538-487d-bb75-86f1d9ab6529",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f6cf4017-9524-435a-9cad-77c5facbbfeb",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('fspiop-source');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with wrong body param type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e7cddb2-3cf1-441f-b1e6-be361c41519e",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7158af7b-cc08-49b9-922d-7ae4111ca213",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('type');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody.quoteId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": 123,\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote happy path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b998b40f-34eb-47c1-be0c-5b7c690d0b88",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('quoteId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b3fb05fd-eac0-4e09-a195-674dd3c150b8",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a974df01-ef33-40e7-841b-1234bd01a718",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "06e02a4d-0902-402e-aef0-21a9d3e4ff15",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Transfer Requests",
			"item": [
				{
					"name": "Send Transfer Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adfa9720-950a-43f2-8f27-f6f4c6c60e28",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ddd4ab9d-ab6b-4c40-9d62-9ee61abe07a8",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer Happy Path Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30fc0be7-3cdf-4a92-8725-73b6d07c5fc3",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5677e901-ea50-437f-aa21-87ae894ee9f9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer with Wrong transferId pattern",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "097fa021-230c-43f5-af63-63e5253a548e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a80690b7-6067-443a-be63-5900e8773103",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 50);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}134\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer missing body param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ea95843-6483-422d-b232-fd4800c03230",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('transferId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe57b92f-46ef-499b-a57e-ea660e7c38f3",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer missing header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71e34cd3-943f-4bbf-977f-c9c55f6cd73a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('date');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf74eb40-fad6-4630-98c7-1be7bec318c5",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer with wrong body param type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16edea3c-ff2c-4c85-abeb-a416aa4a8afa",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('type');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody.transferId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc9950a8-4037-4b13-be74-2cddb74853e1",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"pm.environment.set('transferAmount', 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{WSO2_AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": 123,\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transfer Happy Path",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9cc1aadd-b5be-4195-b546-191b8a4d5f8d",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transferId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0fbb0cff-ba55-4692-9eb9-459e83e6a452",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/transfers/{{transferId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"transfers",
								"{{transferId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b39f1e1a-47ec-4241-acbc-a69ef2515c71",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7a18bace-616f-418e-bddc-89aa7fcee8dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Account Lookup Requests",
			"item": [
				{
					"name": "Get Party Receiver Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8547795a-07e8-49a0-b764-1f1cf93c4c6c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "13ca6f46-ef94-4052-823f-2641d85975dd",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Participant missing body param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "672f8116-5b01-4693-9ee7-252da414225e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.errorCode).to.equal('3100')",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.requestBody');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('fspId');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver missing headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2619f351-69f4-4eef-a619-fb117627e935",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check for error message is relevant\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='keyword').value).to.equal('required');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='dataPath').value).to.equal('.header');",
									"            pm.expect(jsonData.errorInformation.extensionList.find(item => item.key=='missingProperty').value).to.equal('date');",
									"        });",
									"    });",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dac6ad1d-41f0-409c-8298-e5b9dc37c29f",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Participants By Type and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f386238a-7032-45ac-b0cf-2a9b5be13795",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Participants By Type, SubId and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a81f22ec-edb6-4407-ab48-187bb75f81fa",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participant By Type, SubId and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d29f1bd-0a16-41a3-9a18-4cb797ce4729",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fspId\": \"fsp1\",\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/shoecompany/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"shoecompany",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participant By Type and ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec48174c-b071-45c4-b531-86948da30de0",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fspId\": \"fsp1\",\n    \"currency\": \"USD\"\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver by SubId Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a71b6c46-ae23-481b-bcda-cdd14797f3c6",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5076de0d-9b43-4c43-854e-02bf0f806986",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cb8303a-4c89-4869-9e89-0f7007f41d27",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e2414a39-822d-48b1-815b-164dc8dc5071",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('requestId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestId\": \"{{requestId}}\",\r\n  \"partyList\": [\r\n    {\r\n      \"partyIdType\": \"MSISDN\",\r\n      \"partyIdentifier\": \"string\",\r\n      \"partySubIdOrType\": \"string\",\r\n      \"fspId\": \"string\"\r\n    }\r\n  ],\r\n  \"currency\": \"AED\"\r\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Accept Header Validation",
			"item": [
				{
					"name": "Send Quote with invalid accept header 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8978bc3-7b30-412e-b46b-cf9490956099",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9873b27-6f90-4686-b79c-666769103176",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.quotes+json;version=1.1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with invalid accept header 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c78d86e-8113-4377-920b-327eed2262e1",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63b70913-b394-4d24-9c68-878dde92f435",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+test"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with invalid accept header 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a7993e7-e928-41be-b348-3883e7a320ce",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e7a07bf3-d8b3-4f75-9a6d-29e608b902bc",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal('3001');",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "test/vnd.interoperability.quotes+json;"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with a valid accept header 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4922e01f-ffca-4e89-821b-fc6e44b14910",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5108ad2-c4f3-40ec-813b-7d5acf225e88",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with a valid accept header 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0e8f925-6288-4715-b476-569296e278c7",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "896a8cc0-53df-43b9-ab34-16f91eec9f2c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Version Negotiation",
			"item": [
				{
					"name": "Send Quote with version 1.0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2e43623f-856b-4531-be86-9c49e9236e06",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8fabafba-81d8-4f18-80c8-bf6c1e562996",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.0\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f638dcf-293a-4889-9c50-4a5772bff690",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c7862250-d026-4103-94e2-3948b0f7fb82",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"    ",
									"    pm.test(\"Response headers to have proper content-type\", function () {",
									"        pm.response.to.have.header(\"Content-Type\",\"application/vnd.interoperability.quotes+json;version=1.0\");     ",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote with version 5.0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f465241c-8c7c-4435-ad07-c54155719414",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1da4fe0c-d601-4696-a5b1-82c9766315b8",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"    ",
									"    pm.test(\"Response body to have errorInformation\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('errorInformation');",
									"        ",
									"        pm.test(\"Check errorInformation\", function () {",
									"            var jsonData = pm.response.json();",
									"            pm.expect(jsonData.errorInformation).to.have.property('errorCode');",
									"            pm.expect(jsonData.errorInformation.errorCode).to.be.equal(\"3001\");",
									"        });",
									"    });",
									"    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=5.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlements",
			"item": [
				{
					"name": "Get Existing Open Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdfd423f-6337-4e75-8306-8b35dd4a28d2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"State should be OPEN\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].state).to.eql('OPEN');",
									"    pm.environment.set(\"openWindowID\", jsonData[0].id);",
									"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows"
							],
							"query": [
								{
									"key": "state",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Existing Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e32af4d-3eb7-4c1c-87e5-52292baeaf99",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New window State should be OPEN\", function () {",
									"    console.log(pm.response.json());",
									"    pm.expect(pm.response.json().state).to.eql('OPEN');",
									"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
									"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
									"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
									"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/123",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Settlement for Closed Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f9b9e03-c359-47f8-8ff4-881482755507",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"settlementId\", pm.response.json().id);",
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
									"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
									"});",
									"",
									"pm.test(\"Number of associated windows should be 1\", function () {",
									"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
									"});",
									"",
									"",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        console.log(jsonData.participants[j].accounts[k].id)",
									"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
									"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
									"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
									"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
									"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
									"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
									"        }",
									"        ",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": 123\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prepare Settlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "725a65cd-c05e-4229-bc33-f22c6bf0dfcb",
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        console.log(jsonData.participants[j].accounts[k].id)",
									"        const participantPutRequest = {",
									"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
									"          method: 'PUT',",
									"          header: {",
									"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"              \"Content-Type\": \"application/json\"",
									"          },",
									"          body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify(",
									"                {",
									"                  \"participants\": [",
									"                    {",
									"                      \"id\": jsonData.participants[j].id,",
									"                      \"accounts\": [",
									"                        {",
									"                          \"id\": jsonData.participants[j].accounts[k].id,",
									"                          \"reason\": \"Transfers recorded for payer\",",
									"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  ]",
									"                }",
									"            )",
									"          }",
									"        };",
									"        pm.sendRequest(participantPutRequest, function (err, response) {",
									"            console.log(response.json());",
									"        });",
									"        ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements",
								"{{settlementId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check state for participants after prepare",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f24f3b9-b8f1-426d-9c03-6f297746804e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
									"});",
									"",
									"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
									"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
									"});",
									"",
									"",
									"for(var j in jsonData.participants) {",
									"    for(var k in jsonData.participants[j].accounts) {",
									"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
									"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
									"        });",
									"    }",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlements",
								"{{settlementId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0aefe23d-6f40-4d7c-8251-82bdd142a700",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0c3e770d-e492-4945-afff-4dd6fe700b23",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Callback Assertions",
			"item": [
				{
					"name": "Get Party Receiver Happy path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88b3f2f2-a6fc-44c3-adb0-9f8dfc8afe79",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"",
									"",
									"    pm.sendRequest(\"http://localhost:5050/longpolling/callbacks/parties/MSISDN/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              pm.test(\"Got resonse1\"+response.text(), function () {",
									"                pm.expect(\"1\").equal(\"1\");",
									"            });",
									"          } else {",
									"                console.log(response)",
									"          }",
									"    });",
									"   ",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83da446c-c396-464e-8a4e-584d2d350e05",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.parties+json;version=1",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.parties+json;version=1.0",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Party Receiver error callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fba7043-1715-44f0-b5b9-578a45f2609a",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"",
									"",
									"    pm.sendRequest(\"http://localhost:5050/longpolling/callbacks/parties/MSISDN/1234567890\", function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              pm.test(\"Got resonse1\"+response.text(), function () {",
									"                pm.expect(\"1\").equal(\"1\");",
									"            });",
									"          } else {",
									"                console.log(response)",
									"          }",
									"    });",
									"   ",
									"",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "99ddcaff-482c-41a6-8894-97962504ff5e",
								"exec": [
									"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
									"pm.variables.set('expectedFirstName', 'Siabelo');",
									"pm.variables.set('expectedLastName', 'Maroka');",
									"pm.variables.set('expectedDOB', '3/3/1973');",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{payerfsp}}"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/1234567890",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"1234567890"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "746cc361-76d9-4d6f-bffc-ed1612ea5838",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7ef0413b-ef82-47db-9968-226c737a935a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authorization Requests",
			"item": [
				{
					"name": "request the Payer to enter the applicable credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86cf7ef1-41db-42ce-b779-f4c9d596ddcd",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transactionRequestsId', generatedUUID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c1e7077c-6323-4176-b887-4ba45e88e079",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/authorizations/{{transactionRequestsId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"authorizations",
								"{{transactionRequestsId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "BulkQuote Requests",
			"item": [
				{
					"name": "request the creation of a bulk quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83c03928-bb18-4035-a3a5-70512aac4519",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());",
									"pm.environment.set('transactionId', uuid.v4());",
									"pm.environment.set('quoteId', uuid.v4());",
									"pm.environment.set('originalTransactionId', uuid.v4());",
									"pm.environment.set('expiration', new Date().toISOString());",
									"pm.environment.set('merchantClassificationCode', _.random(0, 9999));",
									"pm.environment.set('balanceOfPayments', _.random(100, 999));",
									"pm.environment.set('latitude', _.random(-90,90))",
									"pm.environment.set('longitude', _.random(-180, 90))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37998c09-5987-4ab2-a54f-450ba124eaeb",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bulkQuoteId\": \"{{bulkQuoteId}}\",\r\n  \"payer\": {\r\n    \"partyIdInfo\": {\r\n      \"partyIdType\": \"MSISDN\",\r\n      \"partyIdentifier\": \"string\",\r\n      \"partySubIdOrType\": \"string\",\r\n      \"fspId\": \"string\"\r\n    },\r\n    \"merchantClassificationCode\": \"{{merchantClassificationCode}}\",\r\n    \"name\": \"string\",\r\n    \"personalInfo\": {\r\n      \"complexName\": {\r\n        \"firstName\": \"string\",\r\n        \"middleName\": \"string\",\r\n        \"lastName\": \"string\"\r\n      },\r\n      \"dateOfBirth\": \"1999-01-01\"\r\n    }\r\n  },\r\n  \"geoCode\": {\r\n    \"latitude\": \"{{latitude}}\",\r\n    \"longitude\": \"{{longitude}}\"\r\n  },\r\n  \"expiration\": \"{{expiration}}\",\r\n  \"individualQuotes\": [\r\n    {\r\n      \"quoteId\": \"{{quoteId}}\",\r\n      \"transactionId\": \"{{transactionId}}\",\r\n      \"payee\": {\r\n        \"partyIdInfo\": {\r\n          \"partyIdType\": \"MSISDN\",\r\n          \"partyIdentifier\": \"string\",\r\n          \"partySubIdOrType\": \"string\",\r\n          \"fspId\": \"string\"\r\n        },\r\n        \"merchantClassificationCode\": \"{{merchantClassificationCode}}\",\r\n        \"name\": \"string\",\r\n        \"personalInfo\": {\r\n          \"complexName\": {\r\n            \"firstName\": \"string\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"string\"\r\n          },\r\n          \"dateOfBirth\": \"1999-01-01\"\r\n        }\r\n      },\r\n      \"amountType\": \"SEND\",\r\n      \"amount\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"fees\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"transactionType\": {\r\n        \"scenario\": \"DEPOSIT\",\r\n        \"subScenario\": \"A_Z\",\r\n        \"initiator\": \"PAYER\",\r\n        \"initiatorType\": \"CONSUMER\",\r\n        \"refundInfo\": {\r\n          \"originalTransactionId\": \"{{originalTransactionId}}\",\r\n          \"refundReason\": \"string\"\r\n        },\r\n        \"balanceOfPayments\": \"{{balanceOfPayments}}\"\r\n      },\r\n      \"note\": \"string\",\r\n      \"extensionList\": {\r\n        \"extension\": [\r\n          {\r\n            \"key\": \"string\",\r\n            \"value\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"extensionList\": {\r\n    \"extension\": [\r\n      {\r\n        \"key\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkQuotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkQuotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "get information regarding an earlier created or requested bulk quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff5e8294-6fc8-4c72-bc41-5d7c8d7427e7",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d1d3d178-fec7-4f9c-a67b-64e8a56adc01",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkQuotes/{{bulkQuoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkQuotes",
								"{{bulkQuoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "BulkTransfer Requests",
			"item": [
				{
					"name": "request the creation of a bulk transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53814801-b6ae-4e30-81ee-acc40566e274",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkQuoteId', uuid.v4());",
									"pm.environment.set('bulkTransferId', uuid.v4());",
									"pm.environment.set('expiration', new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7454279a-5b94-4465-a2cf-6f989437b46f",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bulkTransferId\": \"{{bulkTransferId}}\",\r\n  \"bulkQuoteId\": \"{{bulkQuoteId}}\",\r\n  \"payerFsp\": \"string\",\r\n  \"payeeFsp\": \"string\",\r\n  \"individualTransfers\": [\r\n    {\r\n      \"transferId\": \"{{transferId}}\",\r\n      \"transferAmount\": {\r\n        \"currency\": \"AED\",\r\n        \"amount\": \"100\"\r\n      },\r\n      \"ilpPacket\": \"string\",\r\n      \"condition\": \"condition1_condition2_condition3_condition4\",\r\n      \"extensionList\": {\r\n        \"extension\": [\r\n          {\r\n            \"key\": \"string\",\r\n            \"value\": \"string\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"expiration\": \"{{expiration}}\",\r\n  \"extensionList\": {\r\n    \"extension\": [\r\n      {\r\n        \"key\": \"string\",\r\n        \"value\": \"string\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkTransfers",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkTransfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "get information regarding an earlier created or requested bulk transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c3dd9ab0-3832-495e-8a25-a7e32038e3cf",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('bulkTransferId', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "648a6d35-3086-48c0-92cb-342a799b0771",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/bulkTransfers/{{bulkTransferId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"bulkTransfers",
								"{{bulkTransferId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Transaction Requests",
			"item": [
				{
					"name": "get transaction information regarding a financial transaction created earlier",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3f5bdd1-877e-40f0-90bb-0396e89e5a0e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('ID', uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c190a907-221e-4378-8d38-c8898ab6ebb0",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/transactions/{{ID}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"transactions",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "df120ff8-e82f-4125-85c0-c1303731880d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1d121e3c-2b28-4d77-a62a-218d1f4e604a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}