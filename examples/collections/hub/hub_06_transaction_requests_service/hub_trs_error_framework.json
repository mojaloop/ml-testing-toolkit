{
  "name": "hub-transaction-requests-tests",
  "test_cases": [
    {
      "id": 3,
      "name": "error framework",
      "requests": [
        {
          "id": 1,
          "description": "Check unknown transactionID - error code and description",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests/{ID}",
          "path": "/transactionRequests/{$environment.transactionRequestId}",
          "method": "get",
          "params": {
            "ID": "{$environment.transactionRequestId}"
          },
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "payeefsp",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payerfsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback received in the Simulator",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.data).to.not.equal(undefined)"
                ]
              },
              {
                "id": 2,
                "description": "transactionId matches",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.data['transactionId']).to.equal(undefined)"
                ]
              },
              {
                "id": 3,
                "description": "fspiop-source is payerfsp",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.headers['fspiop-source']).to.eql('payerfsp')"
                ]
              },
              {
                "id": 4,
                "description": "fspiop-destination is payeefsp",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.headers['fspiop-destination']).to.equal('payeefsp')"
                ]
              },
              {
                "id": 5,
                "description": "fspiop-http-method is PUT",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": 6,
                "description": "content-type is same as sent in the request",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0')"
                ]
              },
              {
                "id": 7,
                "description": "Check ID missing",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.data.errorInformation.errorDescription).to.equal(`Transaction request ID not found - Transaction Request id ${environment.transactionRequestId} not found`)"
                ]
              },
              {
                "id": 8,
                "description": "Check Error code 3206",
                "exec": [
                  "expect(environment.checkUnknownTransactionIDCallback.data.errorInformation.errorCode).to.equal('3206')"
                ]
              },
              {
                "id": 9,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
                "    pm.environment.set(\"checkUnknownTransactionIDCallback\", response.json())",
                "  });",
                "}, 2000)"
              ]
            },
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');",
                "",
                "pm.environment.set('transactionRequestId', uuid.v4());"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "3100 - Missing body",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests",
          "path": "/transactionRequests",
          "method": "post",
          "ignoreCallbacks": true,
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "payerfsp",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Check Generic validation error ",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal(\"Malformed syntax - .requestBody should be object\")"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3101",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3101')"
                ]
              }
            ]
          },
          "body": null
        },
        {
          "id": 3,
          "description": "3102 - Missing Date ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests",
          "path": "/transactionRequests",
          "method": "post",
          "ignoreCallbacks": true,
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+json;version=1.0",
            "FSPIOP-Source": "payerfsp",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Missing mandatory element - date is required",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal(\"Missing mandatory element - .header should have required property 'date'\")"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3102",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                ]
              }
            ]
          },
          "body": {
            "transactionRequestId": "ee47ec82-3a89-24b8-882a-c87825c51b7e",
            "payee": {
              "partyIdInfo": {
                "partyIdType": "EMAIL",
                "partyIdentifier": "labore in",
                "partySubIdOrType": "do Ut",
                "fspId": "consequat officia ullamco fugi"
              },
              "merchantClassificationCode": "1",
              "name": "voluptate Ut ut ipsum",
              "personalInfo": {
                "complexName": {
                  "firstName": "aSD",
                  "middleName": "ASDF",
                  "lastName": "SADF"
                },
                "dateOfBirth": "3582-07-30"
              }
            },
            "payer": {
              "partyIdType": "IBAN",
              "partyIdentifier": "dolore",
              "partySubIdOrType": "incididunt consequat est",
              "fspId": "{$inputs.fromFspId}"
            },
            "amount": {
              "currency": "BBD",
              "amount": "0.8"
            },
            "transactionType": {
              "scenario": "WITHDRAWAL",
              "initiator": "PAYEE",
              "initiatorType": "AGENT",
              "subScenario": "D",
              "refundInfo": {
                "originalTransactionId": "a2babcaf-ec21-248f-be51-c217dc417f3b",
                "refundReason": "incididunt Lorem"
              },
              "balanceOfPayments": "406"
            },
            "note": "nulla cillum",
            "geoCode": {
              "latitude": "+90.0",
              "longitude": "180.000"
            },
            "authenticationType": "QRCODE",
            "expiration": "8561-03-30T23:12:56.488+06:58",
            "extensionList": {
              "extension": [
                {
                  "key": "t",
                  "value": "proident eu aliquip ea"
                },
                {
                  "key": "dolor eiusmod in ut est",
                  "value": "ex sunt"
                },
                {
                  "key": "et",
                  "value": "in anim"
                },
                {
                  "key": "voluptat",
                  "value": "dolor Ut magna"
                },
                {
                  "key": "s",
                  "value": "elit voluptate Lorem"
                },
                {
                  "key": "ni",
                  "value": "est irure incididunt nostru"
                },
                {
                  "key": "et fugiat",
                  "value": "mollit"
                },
                {
                  "key": "reprehenderit",
                  "value": "incididunt proident ad"
                },
                {
                  "key": "in ipsum ad",
                  "value": "aliqua"
                },
                {
                  "key": "enim occaecat tempor",
                  "value": "ut"
                },
                {
                  "key": "elit",
                  "value": "et tempor laboris Ut eiusmod"
                },
                {
                  "key": "sint Excepteur",
                  "value": "laboris in nisi"
                },
                {
                  "key": "sint",
                  "value": "dolore consequat et enim ea"
                },
                {
                  "key": "nostrud minim",
                  "value": "nisi consectetur id"
                },
                {
                  "key": "occaecat a",
                  "value": "fugiat ea labo"
                },
                {
                  "key": "sed qui",
                  "value": "ea sint ad velit"
                }
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "3102 - Missing fspiop-source",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests",
          "path": "/transactionRequests",
          "method": "post",
          "ignoreCallbacks": true,
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Missing mandatory element - fspiop-source is required",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal(\"Missing mandatory element - .header should have required property 'fspiop-source'\")"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3102",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                ]
              }
            ]
          },
          "body": {
            "transactionRequestId": "ee47ec82-3a89-24b8-882a-c87825c51b7e",
            "payee": {
              "partyIdInfo": {
                "partyIdType": "EMAIL",
                "partyIdentifier": "labore in",
                "partySubIdOrType": "do Ut",
                "fspId": "consequat officia ullamco fugi"
              },
              "merchantClassificationCode": "1",
              "name": "voluptate Ut ut ipsum",
              "personalInfo": {
                "complexName": {
                  "firstName": "aSD",
                  "middleName": "ASDF",
                  "lastName": "SADF"
                },
                "dateOfBirth": "3582-07-30"
              }
            },
            "payer": {
              "partyIdType": "IBAN",
              "partyIdentifier": "dolore",
              "partySubIdOrType": "incididunt consequat est",
              "fspId": "{$inputs.fromFspId}"
            },
            "amount": {
              "currency": "BBD",
              "amount": "0.8"
            },
            "transactionType": {
              "scenario": "WITHDRAWAL",
              "initiator": "PAYEE",
              "initiatorType": "AGENT",
              "subScenario": "D",
              "refundInfo": {
                "originalTransactionId": "a2babcaf-ec21-248f-be51-c217dc417f3b",
                "refundReason": "incididunt Lorem"
              },
              "balanceOfPayments": "406"
            },
            "note": "nulla cillum",
            "geoCode": {
              "latitude": "+90.0",
              "longitude": "180.000"
            },
            "authenticationType": "QRCODE",
            "expiration": "8561-03-30T23:12:56.488+06:58",
            "extensionList": {
              "extension": [
                {
                  "key": "t",
                  "value": "proident eu aliquip ea"
                },
                {
                  "key": "dolor eiusmod in ut est",
                  "value": "ex sunt"
                },
                {
                  "key": "et",
                  "value": "in anim"
                },
                {
                  "key": "voluptat",
                  "value": "dolor Ut magna"
                },
                {
                  "key": "s",
                  "value": "elit voluptate Lorem"
                },
                {
                  "key": "ni",
                  "value": "est irure incididunt nostru"
                },
                {
                  "key": "et fugiat",
                  "value": "mollit"
                },
                {
                  "key": "reprehenderit",
                  "value": "incididunt proident ad"
                },
                {
                  "key": "in ipsum ad",
                  "value": "aliqua"
                },
                {
                  "key": "enim occaecat tempor",
                  "value": "ut"
                },
                {
                  "key": "elit",
                  "value": "et tempor laboris Ut eiusmod"
                },
                {
                  "key": "sint Excepteur",
                  "value": "laboris in nisi"
                },
                {
                  "key": "sint",
                  "value": "dolore consequat et enim ea"
                },
                {
                  "key": "nostrud minim",
                  "value": "nisi consectetur id"
                },
                {
                  "key": "occaecat a",
                  "value": "fugiat ea labo"
                },
                {
                  "key": "sed qui",
                  "value": "ea sint ad velit"
                }
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "3001 - Wrong content version ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests",
          "path": "/transactionRequests",
          "method": "post",
          "ignoreCallbacks": true,
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+json;version=4.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "payerfsp",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Check Unacceptable version requested",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('Unacceptable version requested - Client supplied a protocol version which is not supported by the server')"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')"
                ]
              }
            ]
          },
          "body": null
        },
        {
          "id": 6,
          "description": "3101 - Unsupported Media Type",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests",
          "path": "/transactionRequests",
          "method": "post",
          "ignoreCallbacks": true,
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.transactionRequests+xml;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "payerfsp",
            "Accept": "application/vnd.interoperability.transactionRequests+json;version=1",
            "FSPIOP-Destination": "payeefsp"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Check Malformed syntax - Unsupported Media Type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.equal('Malformed syntax - Unsupported Media Type')"
                ]
              },
              {
                "id": 3,
                "description": "Check Error code 3101",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3101')"
                ]
              }
            ]
          },
          "body": null
        }
      ]
    }
  ]
}