{
  "name": "hub-central-settlements-tests",
  "test_cases": [
    {
      "id": 1,
      "name": "Store Settlement&Position Account Balances Before Transfers",
      "requests": [
        {
          "id": 1,
          "description": "testfsp1 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "testfsp2 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp3 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp4 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Run Quote & Transfers",
      "requests": [
        {
          "id": 1,
          "description": "Close Existing Window(quotes and transfers)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200 or error code 3001",
                "exec": [
                  "if (response.body.errorInformation) {",
                  "  expect(response.body.errorInformation.errorCode).to.equal(\"3100\")",
                  "} else {",
                  "  expect(response.status).to.equal(200)  ",
                  "}",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "State to be OPEN or Window is empty",
                "exec": [
                  "if (response.body.errorInformation) {",
                  "  expect(response.body.errorInformation.errorDescription).to.equal(`Generic validation error - Window ${environment.openWindowID} is empty`)",
                  "} else {",
                  "  expect(response.body.state).to.equal('OPEN') ",
                  "}"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"closedWindowID\", pm.environment.get(\"openWindowID\"));\r",
                "pm.environment.set(\"openWindowID\", pm.response.body.settlementWindowId);\r",
                "console.log('openWindowID', pm.environment.get(\"openWindowID\"));\r",
                "console.log('closedWindowID', pm.environment.get(\"closedWindowID\"));"
              ]
            },
            "preRequest": {
              "exec": [
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
                "    pm.environment.set(\"openWindowID\", response.json()[0].settlementWindowId)",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Send Quote 1 (testfsp1 to testfsp2)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp1",
            "FSPIOP-Destination": "testfsp2"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp1"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp2"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 60);"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Send Transfer 1 ( testfsp1 to testfsp2 )",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp1",
            "FSPIOP-Destination": "testfsp2"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp1",
            "payeeFsp": "testfsp2",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse1).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse1.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000))\r",
                "pm.environment.set('transferAmount', 60);"
              ]
            },
            "postRequest": {
              "exec": [
                "",
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse1\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Send Quote 2 (testfsp1 to testfsp4)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp1",
            "FSPIOP-Destination": "testfsp4"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp1"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp4"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 55.12);"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Send Transfer 2 (testfsp1 to testfsp4)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp1",
            "FSPIOP-Destination": "testfsp4"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp1",
            "payeeFsp": "testfsp4",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse2).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse2.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set('transferDate', (new Date()).toUTCString());\r",
                "pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));\r",
                "pm.environment.set('transferAmount', 55.99);"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse2\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Send Quote 3 (testfsp3 to testfsp1)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp3",
            "FSPIOP-Destination": "testfsp1"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp3"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp1"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 35.1);"
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Send Transfer 3 (testfsp3 to testfsp1)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp3",
            "FSPIOP-Destination": "testfsp1"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp3",
            "payeeFsp": "testfsp1",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse3).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse3.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set('transferDate', (new Date()).toUTCString());\r",
                "pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 60000))\r",
                "pm.environment.set('transferAmount', 35.9);"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse3\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 8,
          "description": "Send Quote 4 (testfsp2 to testfsp3)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp2",
            "FSPIOP-Destination": "testfsp3"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp2"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp3"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 20.11);"
              ]
            }
          }
        },
        {
          "id": 9,
          "description": "Send Transfer 4 (testfsp2 to testfsp3)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp2",
            "FSPIOP-Destination": "testfsp3"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp2",
            "payeeFsp": "testfsp3",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse4).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse4.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set('transferDate', (new Date()).toUTCString());\r",
                "pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 120000))\r",
                "pm.environment.set(\"transferAmount\", 20.32);"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse4\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 10,
          "description": "Send Quote 5 (testfsp4 to testfsp2)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp4",
            "FSPIOP-Destination": "testfsp2"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp4"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp2"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 35.124);"
              ]
            }
          }
        },
        {
          "id": 11,
          "description": "Send Transfer 5 (testfsp4 to testfsp2)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp4",
            "FSPIOP-Destination": "testfsp2"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp4",
            "payeeFsp": "testfsp2",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse5).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse5.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));\r",
                "pm.environment.set('transferAmount', 35.987);"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse5\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        },
        {
          "id": 12,
          "description": "Send Quote 6 (testfsp4 to testfsp3)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp4",
            "FSPIOP-Destination": "testfsp3"
          },
          "body": {
            "quoteId": "{$function.generic.generateUUID}",
            "transactionId": "{$function.generic.generateUUID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22507008181",
                "fspId": "testfsp4"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "22556999125",
                "fspId": "testfsp3"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "pm.environment.set('transferAmount', 25.1234);"
              ]
            }
          }
        },
        {
          "id": 13,
          "description": "Send Transfer 6 (testfsp4 to testfsp3)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "ignoreCallbacks": true,
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "testfsp4",
            "FSPIOP-Destination": "testfsp3"
          },
          "body": {
            "transferId": "{$environment.transfer_ID}",
            "payerFsp": "testfsp4",
            "payeeFsp": "testfsp3",
            "amount": {
              "amount": "{$environment.transferAmount}",
              "currency": "{$environment.currency}"
            },
            "expiration": "{$environment.transferExpiration}",
            "ilpPacket": "{$environment.ilpPacket}",
            "condition": "{$environment.condition}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Callback does not have transferId",
                "exec": [
                  "expect(environment.sendTransferResponse6).to.not.have.property('transferId')"
                ]
              },
              {
                "id": 2,
                "description": "Callback status is COMMITTED",
                "exec": [
                  "expect(environment.sendTransferResponse6.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 3,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');\r",
                "\r",
                "pm.environment.set('transfer_ID', uuid.v4());\r",
                "pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 120000));\r",
                "pm.environment.set('transferAmount', 25.7657);"
              ]
            },
            "postRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
                "    pm.environment.set(\"sendTransferResponse6\", response.json())",
                "  });",
                "}, 500)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "Create Settlement DEFERREDNET",
      "requests": [
        {
          "id": 2,
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(response.body.state).to.equal('OPEN')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "setTimeout(function () {",
                "  pm.sendRequest(pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
                "    pm.environment.set(\"openWindowID\", response.json()[0].settlementWindowId)",
                "  });",
                "}, 500)"
              ]
            },
            "postRequest": {
              "exec": [
                "pm.environment.set(\"closedWindowID\", pm.environment.get(\"openWindowID\"));\r",
                "pm.environment.set(\"openWindowID\", pm.response.body.settlementWindowId);\r",
                "console.log('openWindowID', pm.environment.get(\"openWindowID\"));\r",
                "console.log('closedWindowID', pm.environment.get(\"closedWindowID\"));"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Create Settlement for Closed Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "body": {
            "settlementModel": "DEFERREDNET",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closedWindowID}"
              }
            ]
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.state).to.equal('PENDING_SETTLEMENT')"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "expect(response.body.settlementWindows.length).to.equal(1)"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID should be as closedWindowId",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.eql(environment.closedWindowID)"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT ",
                "exec": [
                  "expect(response.body.state).to.equal('PENDING_SETTLEMENT')"
                ]
              },
              {
                "id": 6,
                "description": "Associated number of participants should be 4",
                "exec": [
                  "expect(response.body.participants.length).to.equal(4)"
                ]
              },
              {
                "id": 7,
                "description": "DEFERREDNET calculation for testfsp1 should be 80.09",
                "exec": [
                  "expect(response.body.participants[0].accounts[0].netSettlementAmount.amount).to.equal(80.09)"
                ]
              },
              {
                "id": 8,
                "description": "DEFERREDNET calculation for testfsp2 should be -75.667",
                "exec": [
                  "expect(response.body.participants[1].accounts[0].netSettlementAmount.amount).to.equal(-75.667)"
                ]
              },
              {
                "id": 9,
                "description": "DEFERREDNET calculation for testfsp3 should be -10.1857",
                "exec": [
                  "expect(response.body.participants[2].accounts[0].netSettlementAmount.amount).to.equal(-10.1857)"
                ]
              },
              {
                "id": 10,
                "description": "DEFERREDNET calculation for testfsp4 should be 5.7627",
                "exec": [
                  "expect(response.body.participants[3].accounts[0].netSettlementAmount.amount).to.equal(5.7627)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "pm.environment.set(\"settlementId\", pm.response.body.id);",
                "",
                "",
                "pm.response.body.participants.forEach(participant => {",
                "  participant.accounts.forEach(account => {",
                "    console.log(account.id)",
                "    if (account.id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
                "      console.log('payerfspNetSettlementAmount:', pm.environment.get(\"payerFspAccountId\"))",
                "      pm.environment.set(\"payerfspNetSettlementAmount\",account.netSettlementAmount.amount);",
                "    } else if (account.id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
                "      console.log('payeefspNetSettlementAmount:',account.netSettlementAmount.amount)",
                "      pm.environment.set(\"payeefspNetSettlementAmount\",account.netSettlementAmount.amount);",
                "        ",
                "    }",
                "  })",
                "})"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "Store Settlement&Position Account Balances After Transfers",
      "requests": [
        {
          "id": 1,
          "description": "testfsp1 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "testfsp2 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp3 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}\r",
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp4 balances",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;\r",
                "for (var i in jsonData) {\r",
                "    if (jsonData[i].ledgerAccountType === \"SETTLEMENT\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "    if (jsonData[i].ledgerAccountType === \"POSITION\") {\r",
                "        console.log(jsonData[i].value)\r",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);\r",
                "    }\r",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "Prepare Settlement",
      "requests": [
        {
          "id": 1,
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for(var j in jsonData.participants) {",
                "    for(var k in jsonData.participants[j].accounts) {",
                "        console.log(jsonData.participants[j].accounts[k].id)",
                "        const participantPutRequest = {",
                "          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
                "          method: 'PUT',",
                "          header: {",
                "              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
                "              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
                "              \"Content-Type\": \"application/json\"",
                "          },",
                "          body: {",
                "            mode: 'raw',",
                "            raw: JSON.stringify(",
                "                {",
                "                  \"participants\": [",
                "                    {",
                "                      \"id\": jsonData.participants[j].id,",
                "                      \"accounts\": [",
                "                        {",
                "                          \"id\": jsonData.participants[j].accounts[k].id,",
                "                          \"reason\": \"Transfers recorded for payer\",",
                "                          \"state\": \"PS_TRANSFERS_RECORDED\"",
                "                        }",
                "                      ]",
                "                    }",
                "                  ]",
                "                }",
                "            )",
                "          }",
                "        };",
                "        pm.sendRequest(participantPutRequest, function (err, response) {",
                "            console.log(response.json());",
                "        });",
                "        ",
                "    }",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "check state for participants after prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement Id should be as expected",
                "exec": [
                  "expect(response.body.id).to.equal(environment.settlementId)"
                ]
              },
              {
                "id": 3,
                "description": "Settlement state should be PS_TRANSFERS_RECORDED",
                "exec": [
                  "expect(response.body.state).to.equal(\"PS_TRANSFERS_RECORDED\")"
                ]
              },
              {
                "id": 4,
                "description": "Settlement Window ID should be closed",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": 5,
                "description": "Settlement Window State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": 6,
                "description": "Participant Accounts state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "response.body.participants.forEach(participant => {",
                  "\tparticipant.accounts.forEach(account => {",
                  "      expect(account.state).to.equal(\"PS_TRANSFERS_RECORDED\")",
                  "    })",
                  "})"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "console.log(pm.response)"
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp1 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp1 settlement account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp1SettleAccountBalanceAfterPrepare).to.equal(environment.testfsp1SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp1 position account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp1PositionAccountBalanceAfterPrepare).to.equal(environment.testfsp1PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var testfsp1SettleAccountBalanceAfterPrepare;",
                "var testfsp1PositionAccountBalanceAfterPrepare;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp2 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp2 settlement account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp2SettleAccountBalanceAfterPrepare).to.equal(environment.testfsp2SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp2 position account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp2PositionAccountBalanceAfterPrepare).to.equal(environment.testfsp2PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var testfsp1SettleAccountBalanceAfterPrepare;",
                "var testfsp1PositionAccountBalanceAfterPrepare;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "testfsp3 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp3 settlement account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp3SettleAccountBalanceAfterPrepare).to.equal(environment.testfsp3SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp3 position account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp3PositionAccountBalanceAfterPrepare).to.equal(environment.testfsp3PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var testfsp1SettleAccountBalanceAfterPrepare;",
                "var testfsp1PositionAccountBalanceAfterPrepare;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "testfsp4 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp4 settlement account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp4SettleAccountBalanceAfterPrepare).to.equal(environment.testfsp4SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp4 position account balance before and  after prepare should be the same.",
                "exec": [
                  "expect(environment.testfsp4PositionAccountBalanceAfterPrepare).to.equal(environment.testfsp4PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var testfsp1SettleAccountBalanceAfterPrepare;",
                "var testfsp1PositionAccountBalanceAfterPrepare;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceAfterPrepare\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "Reserve Settlement",
      "requests": [
        {
          "id": 1,
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for(var j in jsonData.participants) {",
                "    for(var k in jsonData.participants[j].accounts) {",
                "        console.log(jsonData.participants[j].accounts[k].id)",
                "        const participantPutRequest = {",
                "          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
                "          method: 'PUT',",
                "          header: {",
                "              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
                "              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
                "              \"Content-Type\": \"application/json\"",
                "          },",
                "          body: {",
                "            mode: 'raw',",
                "            raw: JSON.stringify(",
                "                {",
                "                  \"participants\": [",
                "                    {",
                "                      \"id\": jsonData.participants[j].id,",
                "                      \"accounts\": [",
                "                        {",
                "                          \"id\": jsonData.participants[j].accounts[k].id,",
                "                          \"reason\": \"Transfers reserved\",",
                "                          \"state\": \"PS_TRANSFERS_RESERVED\"",
                "                        }",
                "                      ]",
                "                    }",
                "                  ]",
                "                }",
                "            )",
                "          }",
                "        };",
                "        pm.sendRequest(participantPutRequest, function (err, response) {",
                "            console.log(response.json());",
                "        });",
                "        ",
                "    }",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "check state for participants after reserve",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement Id should be as expected",
                "exec": [
                  "expect(response.body.id).to.equal(environment.settlementId)"
                ]
              },
              {
                "id": 3,
                "description": "Settlement state should be PS_TRANSFERS_RESERVED",
                "exec": [
                  "expect(response.body.state).to.equal(\"PS_TRANSFERS_RESERVED\")"
                ]
              },
              {
                "id": 4,
                "description": "Settlement Window ID should be closed",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": 5,
                "description": "Settlement Window State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": 6,
                "description": "Participant Accounts state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "response.body.participants.forEach(participant => {",
                  "\tparticipant.accounts.forEach(account => {",
                  "      expect(account.state).to.equal(\"PS_TRANSFERS_RESERVED\")",
                  "    })",
                  "})"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp1 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp1 settlement account balance before and  after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp1SettleAccountBalanceAfterReserve).to.equal(environment.testfsp1SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp1 position account balance before and after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp1PositionAccountBalanceAfterPrepare).to.equal(environment.testfsp1PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp2 settlement&position accont balance after reserve",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp2 settlement account balance before and  after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp2SettleAccountBalanceAfterReserve).to.equal(environment.testfsp2SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp2 position account balance after reserve gets increased by its net settlement amount.",
                "exec": [
                  "expect(environment.testfsp2PositionAccountBalanceAfterReserve).to.equal(environment.testfsp2PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "var testfsp1SettleAccountBalanceAfterPrepare;",
                "var testfsp1PositionAccountBalanceAfterPrepare;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "testfsp3 settlement&position accont balance after reserve",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp3 settlement account balance before and after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp3SettleAccountBalanceAfterReserve).to.equal(environment.testfsp3SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp3 position account balance after reserve gets increased by its net settlement amount.",
                "exec": [
                  "expect(environment.testfsp3PositionAccountBalanceAfterReserve).to.equal(environment.testfsp3PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "testfsp4 settlement&position accont balance after reserve",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp4 settlement account balance before and after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp4SettleAccountBalanceAfterReserve).to.equal(environment.testfsp4SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp4 position account balance before and after reserve should be the same.",
                "exec": [
                  "expect(environment.testfsp4PositionAccountBalanceAfterReserve).to.equal(environment.testfsp4PositionAccountBalanceAfterTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceAfterReserve\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "Commit Settlement",
      "requests": [
        {
          "id": 1,
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for(var j in jsonData.participants) {",
                "    for(var k in jsonData.participants[j].accounts) {",
                "        console.log(jsonData.participants[j].accounts[k].id)",
                "        const participantPutRequest = {",
                "          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
                "          method: 'PUT',",
                "          header: {",
                "              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
                "              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
                "              \"Content-Type\": \"application/json\"",
                "          },",
                "          body: {",
                "            mode: 'raw',",
                "            raw: JSON.stringify(",
                "                {",
                "                  \"participants\": [",
                "                    {",
                "                      \"id\": jsonData.participants[j].id,",
                "                      \"accounts\": [",
                "                        {",
                "                          \"id\": jsonData.participants[j].accounts[k].id,",
                "                          \"reason\": \"Transfers committed\",",
                "                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
                "                        }",
                "                      ]",
                "                    }",
                "                  ]",
                "                }",
                "            )",
                "          }",
                "        };",
                "        pm.sendRequest(participantPutRequest, function (err, response) {",
                "            console.log(response.json());",
                "        });",
                "        ",
                "    }",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "check state for participants after prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement Id should be as expected",
                "exec": [
                  "expect(response.body.id).to.equal(environment.settlementId)"
                ]
              },
              {
                "id": 3,
                "description": "Settlement state should be PS_TRANSFERS_COMMITTED",
                "exec": [
                  "expect(response.body.state).to.equal(\"PS_TRANSFERS_COMMITTED\")"
                ]
              },
              {
                "id": 4,
                "description": "Settlement Window ID should be closed",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": 5,
                "description": "Settlement Window State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": 6,
                "description": "Participant Accounts state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "response.body.participants.forEach(participant => {",
                  "\tparticipant.accounts.forEach(account => {",
                  "      expect(account.state).to.equal(\"PS_TRANSFERS_COMMITTED\")",
                  "    })",
                  "})"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp1 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp1 settlement account balance before and  after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp1SettleAccountBalanceAfterCommit).to.equal(environment.testfsp1SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp1 position account balance after commit should be reduced by its net settlement amount.",
                "exec": [
                  "expect(environment.testfsp1PositionAccountBalanceAfterCommit).to.equal(environment.testfsp1PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp2 settlement&position accont balance after commit",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp2 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp2SettleAccountBalanceAfterCommit).to.equal(environment.testfsp2SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp2 position account balance after reserve gets increased by its net settlement amount.",
                "exec": [
                  "expect(environment.testfsp2PositionAccountBalanceAfterCommit).to.equal(environment.testfsp2PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "testfsp3 settlement&position accont balance after commit",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp3 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp3SettleAccountBalanceAfterCommit).to.equal(environment.testfsp3SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp3 position account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp3PositionAccountBalanceAfterCommit).to.equal(environment.testfsp3PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "testfsp4 settlement&position accont balance after commit",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp4 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp4SettleAccountBalanceAfterCommit).to.equal(environment.testfsp4SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp4 position account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp4PositionAccountBalanceAfterCommit).to.equal(environment.testfsp4PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceAfterCommit\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 8,
      "name": "Settle Settlement",
      "requests": [
        {
          "id": 1,
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for(var j in jsonData.participants) {",
                "    for(var k in jsonData.participants[j].accounts) {",
                "        console.log(jsonData.participants[j].accounts[k].id)",
                "        const participantPutRequest = {",
                "          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
                "          method: 'PUT',",
                "          header: {",
                "              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
                "              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
                "              \"Content-Type\": \"application/json\"",
                "          },",
                "          body: {",
                "            mode: 'raw',",
                "            raw: JSON.stringify(",
                "                {",
                "                  \"participants\": [",
                "                    {",
                "                      \"id\": jsonData.participants[j].id,",
                "                      \"accounts\": [",
                "                        {",
                "                          \"id\": jsonData.participants[j].accounts[k].id,",
                "                          \"reason\": \"Transfers settled for payer\",",
                "                          \"state\": \"SETTLED\"",
                "                        }",
                "                      ]",
                "                    }",
                "                  ]",
                "                }",
                "            )",
                "          }",
                "        };",
                "        pm.sendRequest(participantPutRequest, function (err, response) {",
                "            console.log(response.json());",
                "        });",
                "        ",
                "    }",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "check state for participants after settle",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement Id should be as expected",
                "exec": [
                  "expect(response.body.id).to.equal(environment.settlementId)"
                ]
              },
              {
                "id": 3,
                "description": "Settlement state should be SETTLED",
                "exec": [
                  "expect(response.body.state).to.equal(\"SETTLED\")"
                ]
              },
              {
                "id": 4,
                "description": "Settlement Window ID should be closed",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": 5,
                "description": "Settlement Window State should be SETTLED",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"SETTLED\")"
                ]
              },
              {
                "id": 6,
                "description": "Participant Accounts state is SETTLED",
                "exec": [
                  "response.body.participants.forEach(participant => {",
                  "\tparticipant.accounts.forEach(account => {",
                  "      expect(account.state).to.equal(\"SETTLED\")",
                  "    })",
                  "})"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "testfsp1 settlement&position accont balance after prepare",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp1/accounts",
          "method": "get",
          "params": {
            "name": "testfsp1"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp1 settlement account balance before and after settle should be the same.",
                "exec": [
                  "expect(environment.testfsp1SettleAccountBalanceAfterSettle).to.equal(environment.testfsp1SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp1 position account balance before and after settle should be the same.",
                "exec": [
                  "expect(environment.testfsp1PositionAccountBalanceAfterSettle).to.equal(environment.testfsp1PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp1SettleAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp1PositionAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "testfsp2 settlement&position accont balance after settle",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp2/accounts",
          "method": "get",
          "params": {
            "name": "testfsp2"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp2 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp2SettleAccountBalanceAfterSettle).to.equal(environment.testfsp2SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp2 position account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp2PositionAccountBalanceAfterSettle).to.equal(environment.testfsp2PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp2SettleAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp2PositionAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "testfsp3 settlement&position accont balance after settle",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp3/accounts",
          "method": "get",
          "params": {
            "name": "testfsp3"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp3 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp3SettleAccountBalanceAfterSettle).to.equal(environment.testfsp3SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp3 position account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp3PositionAccountBalanceAfterSettle).to.equal(environment.testfsp3PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp3SettleAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp3PositionAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "testfsp4 settlement&position accont balance after settle",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/testfsp4/accounts",
          "method": "get",
          "params": {
            "name": "testfsp4"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Testfsp4 settlement account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp4SettleAccountBalanceAfterSettle).to.equal(environment.testfsp4SettleAccountBalanceAfterTransfer)"
                ]
              },
              {
                "id": 3,
                "description": "Testfsp4 position account balance before and after commit should be the same.",
                "exec": [
                  "expect(environment.testfsp4PositionAccountBalanceAfterSettle).to.equal(environment.testfsp4PositionAccountBalanceBeforeTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "for (var i in jsonData){",
                "    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
                "        pm.environment.set(\"testfsp4SettleAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
                "        pm.environment.set(\"testfsp4PositionAccountBalanceAfterSettle\", jsonData[i].value)",
                "    }",
                "}"
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Hub account balance check",
          "apiVersion": {
            "minorVersion": 3,
            "majorVersion": 9,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/Hub/accounts",
          "method": "get",
          "params": {
            "name": "Hub"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "console.log(pm.response.body)"
              ]
            }
          }
        }
      ]
    }
  ]
}