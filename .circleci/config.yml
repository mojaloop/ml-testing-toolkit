# CircleCI v2 Config
version: 2

defaults_working_directory: &defaults_working_directory
  working_directory: /home/circleci/project

defaults_docker_node: &defaults_docker_node
  docker:
    - image: node:12.16.3-alpine

defaults_docker_ubuntu: &defaults_docker_ubuntu
  docker:
    - image: cimg/node:12.16.3

defaults_docker_helm_kube: &defaults_docker_helm_kube
  docker:
    - image: hypnoglow/kubernetes-helm

# default_env: &default_env
#   environment:
#     # - TAG_EXP: 'v[0-9]+(\.[0-9]+)*'
#     # - TAG_EXP_SNAPSHOT: 'v[0-9]+(\.[0-9]+)*\-SNAPSHOT'
#     # - TAG: v1.0

defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp
defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip
defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up
defaults_build_docker_login: &defaults_build_docker_login
  name: Login to Docker Hub
  command: |
    docker login -u $DOCKER_USER -p $DOCKER_PASS
defaults_build_docker_build: &defaults_build_docker_build
  name: Build Docker image
  command: |
    docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG .
defaults_build_docker_publish: &defaults_build_docker_publish
  name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
  command: |
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
defaults_slack_announcement: &defaults_slack_announcement
  name: Slack announcement for tag releases
  command: |
    curl -X POST \
      $SLACK_WEBHOOK_ANNOUNCEMENT \
      -H 'Content-type: application/json' \
      -H 'cache-control: no-cache' \
      -d "{
      \"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"
    }"
jobs:
  setup:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          name: Build dependencies
          command: apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Install node-gyp globally
          command: npm install -g node-gyp
      - run:
          name: Update NPM install
          command: npm install
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      # - run:
      #     name: Update NPM install
      #     command: npm link sodium && npm link argon2 && npm install --production
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-unit:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    # resource_class: large
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: |
            export NODE_OPTIONS=--max_old_space_size=4096
            npm run test:unit --silent -- --json --maxWorkers=2 --outputFile ./test/results/unit.json
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-postman:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Install newman and forever
          command: npm install -g newman forever
      - run:
          name: Start the server
          command: forever start src/index.js
      - run:
          name: Wait for some time
          command: sleep 10
      - run:
          name: Execute postman tests
          command: sh postman/run_newman.sh |tee ./test/results/postman.txt
      - run:
          name: Stop the server
          command: forever stop src/index.js
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run:
          name: Execute code coverage check
          command: |
            export NODE_OPTIONS=--max_old_space_size=4096
            npm -s run test:coverage-check -- --maxWorkers=2
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/ml-testing-toolkit/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  vulnerability-check:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json 
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build-native-app:
    <<: *defaults_working_directory
    <<: *defaults_docker_ubuntu
    steps:
      - run:
          name: Install dependencies
          command: |
            # curl -fsSL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            # sudo apt-get install -y nodejs
            # sudo apt install zip
            # sudo apt install git
            # Installing Docker CLI
            sudo npm install -g pkg
      - checkout
      - run:
          name: Check if release exists
          command: |
            if [[ ! $(git ls-remote origin "refs/tags/${CIRCLE_TAG}") ]]; then
              echo "Release doesn't exist"
              exit 1
            fi
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Installing NPM Dependencies
          command: npm install
      - run:
          name: Preparing Native App for MacOS
          command: |
            sh ./native-app-generation/build-native-app.sh -arch x64 -platform macos
            cd out_native_bin
            zip -r ${CIRCLE_PROJECT_REPONAME}_${CIRCLE_TAG}_macos_x64.zip macos-x64/*
            rm -rf macos-x64
      - run:
          name: Preparing Native App for Linux
          command: |
            sh ./native-app-generation/build-native-app.sh -arch x64 -platform linux
            cd out_native_bin/linux-x64
            tar czf ../${CIRCLE_PROJECT_REPONAME}_${CIRCLE_TAG}_linux_x64.tar.gz *
            cd ..
            rm -rf linux-x64
      - run:
          name: Preparing Native App for Windows
          command: |
            sh ./native-app-generation/build-native-app.sh -arch x64 -platform win
            cd out_native_bin
            zip -r ${CIRCLE_PROJECT_REPONAME}_${CIRCLE_TAG}_win_x64.zip win-x64/*
            rm -rf win-x64
      - run:
          name: Download GitHub Releases tool
          command: |
            curl -Ls https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_amd64.tar.gz | tar -xvz -C /tmp/
            sudo cp /tmp/ghr_v0.12.0_linux_amd64/ghr /usr/local/bin/
      - run:
          name: Updating release with artefacts
          command: |
            ghr \
              --token ${GITHUB_TOKEN} \
              --username ${CIRCLE_PROJECT_USERNAME} \
              --repository ${CIRCLE_PROJECT_REPONAME} \
              --commitish ${CIRCLE_SHA1} \
              --name "Release ${CIRCLE_TAG}" \
              --replace \
              --body "Automatic Release" \
                ${CIRCLE_TAG} out_native_bin

  build-snapshot:
    machine: true
    <<: *defaults_working_directory
    steps:
      - checkout
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT' >> $BASH_ENV
      - run:
          <<: *defaults_build_docker_login
      - run:
          <<: *defaults_build_docker_build
      - run:
          <<: *defaults_build_docker_publish
      - run:
          <<: *defaults_slack_announcement

  build:
    machine: true
    # <<: *default_env
    steps:
      - checkout
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_build_docker_login
      - run:
          <<: *defaults_build_docker_build
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImages=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses
      - run:
          <<: *defaults_build_docker_publish
      - run:
          <<: *defaults_slack_announcement


workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-postman:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build-native-app:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

      - build-snapshot:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot/
            branches:
              ignore:
                - /.*/
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

